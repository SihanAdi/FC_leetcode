class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        if (!wordList.contains(endWord)){
            return 0;
        }
        Map<String, List<String>> map = new HashMap<>();
        for (String str : wordList){
            for (int i = 0; i < str.length(); i++){
                String tmp = str.substring(0, i) + '*' + str.substring(i + 1, str.length());
                List<String> cur = map.getOrDefault(tmp, new LinkedList<>());
                cur.add(str);
                map.put(tmp, cur);
            }
        }
        
        Queue<String> queue = new LinkedList<>();
        Map<String, Integer> count = new HashMap<>();
        Map<String, Boolean> visited = new HashMap<>();
        
        queue.add(beginWord);
        visited.put(beginWord, true);
        count.put(beginWord, 1);
        
        while (!queue.isEmpty()){
            String tmp = queue.poll();
            int l = count.get(tmp);
            for (int i = 0; i < tmp.length(); i++){
                String tmpp = tmp.substring(0, i) + '*' + tmp.substring(i + 1, tmp.length());
                if (map.containsKey(tmpp)){
                    for (String str: map.get(tmpp)){
                        if (str.equals(endWord)){
                            return l + 1;
                        }
                        if (!visited.containsKey(str)){
                            queue.add(str);
                            visited.put(str, true);
                            count.put(str, l + 1);
                        }
                    }
                }
            }
        }
        return 0;
    }
}
