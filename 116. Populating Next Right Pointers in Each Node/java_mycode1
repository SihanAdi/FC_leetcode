/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

class Solution {
    public Node connect(Node root) {
        if (root == null){
            return null;
        }
        //stack
        Node node = root;
        
        LinkedList<Node> stack = new LinkedList<>();
        stack.addLast(root);
        stack.addLast(null);
        while (!stack.isEmpty()){
            
            Node tmp = stack.removeFirst();
            Node tmpp = stack.get(0);
            if (tmp.left != null){
                stack.addLast(tmp.left);
            }
            if (tmp.right != null){
                stack.addLast(tmp.right);
            }
            if (tmpp == null){
                tmp.next = null;
                stack.removeFirst();
                if (stack.isEmpty()){
                    break;
                }
                stack.addLast(null);
            }else{
                tmp.next = tmpp;
            }
            
        }
        return root;
    }
}
