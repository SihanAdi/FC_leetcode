class Solution {
    List<String> ans = new LinkedList<>();
    public List<String> wordBreak(String s, List<String> wordDict) {
        res(s, wordDict, new StringBuffer(), 0);
        return ans;
    }
    public void res(String s, List<String> wordDict, StringBuffer tmp, int start){
        if (start >= s.length()){
            
            if (tmp.charAt(tmp.length() - 1) == ' '){
                tmp.delete(tmp.length() - 1, tmp.length());
            }
            ans.add(tmp.toString());
            
            
            return;
        }
        
        for (int i = start + 1; i <= s.length(); i++){
            if (wordDict.contains(s.substring(start, i))){
                tmp.append(s.substring(start, i));
                tmp.append(" ");
                res(s, wordDict, tmp, i);
                int j = tmp.lastIndexOf(s.substring(start, i));
                tmp.delete(j, tmp.length());
            }
        }
    }
}
