class Solution {
    public List<String> findMissingRanges(int[] nums, int lower, int upper) {
        List<String> ans = new LinkedList<>();
        StringBuffer tmp = new StringBuffer();
        if (nums.length == 0){
            if (lower != upper){
                tmp.append(String.valueOf(lower));
                tmp.append("->");
                tmp.append(String.valueOf(upper));
                ans.add(tmp.toString());
            }else{
                tmp.append(String.valueOf(upper));
                ans.add(tmp.toString());
            }
            
            return ans;
        }
        for (int i = 0; i < nums.length; i++){
            if (i == 0 && nums[i] > lower){
                if (nums[i] - 1 != lower){
                    tmp.append(String.valueOf(lower));
                    tmp.append("->");
                    tmp.append(String.valueOf(nums[i] - 1));
                    ans.add(tmp.toString());
                }else{
                    tmp.append(String.valueOf(lower));
                    ans.add(tmp.toString());
                }
                tmp = new StringBuffer();
            }
            if (i == nums.length - 1 && nums[i] < upper){
                if (nums[i] + 1 != upper){
                    tmp.append(String.valueOf(nums[i] + 1));
                    tmp.append("->");
                    tmp.append(String.valueOf(upper));
                    ans.add(tmp.toString());
                }else{
                    tmp.append(String.valueOf(upper));
                    ans.add(tmp.toString());
                }
                tmp = new StringBuffer();
            }
            if (i < nums.length - 1 && nums[i] < nums[i + 1] - 1){
                if (nums[i] + 1 != nums[i + 1] - 1){
                    tmp.append(String.valueOf(nums[i] + 1));
                    tmp.append("->");
                    tmp.append(String.valueOf(nums[i + 1] - 1));
                    ans.add(tmp.toString());
                }else{
                    tmp.append(String.valueOf(nums[i + 1] - 1));
                    ans.add(tmp.toString());
                }
                tmp = new StringBuffer();
            }
        }
        return ans;
    }
}
