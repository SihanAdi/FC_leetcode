class Solution {
    public void solve(char[][] board) {
        int[][] visited = new int[board.length][board[0].length];
        for (int i = 0; i < board[0].length; i++){
            if (board[0][i] == 'O' && visited[0][i] == 0){
                check(board, visited, 0, i);
            }
        }
        for (int i = 0; i < board.length; i++){
            if (board[i][0] == 'O' && visited[i][0] == 0){
                check(board, visited, i, 0);
            }
        }
        for (int i = 0; i < board[0].length; i++){
            if (board[board.length - 1][i] == 'O' && visited[board.length - 1][i] == 0){
                check(board, visited, board.length - 1, i);
            }
        }
        for (int i = 0; i < board.length; i++){
            if (board[i][board[0].length - 1] == 'O' && visited[i][board[0].length - 1] == 0){
                check(board, visited, i, board[0].length - 1);
            }
        }
        for (int i = 0; i < board.length; i++){
            for (int j = 0; j < board[0].length; j++){
                if (visited[i][j] == 1){
                    board[i][j] = 'O';
                }else{
                    board[i][j] = 'X';
                }
            }
        }
    }
    public void check(char[][] board, int[][] visited, int i, int j){
        if (i >= board.length || j >= board[0].length || i < 0 || j < 0 || board[i][j] != 'O' || visited[i][j] == 1){
            return;
        }else{
            visited[i][j] = 1;
        }
        check(board, visited, i - 1, j);
        check(board, visited, i + 1, j);
        check(board, visited, i, j - 1);
        check(board, visited, i, j + 1);
    }
}
