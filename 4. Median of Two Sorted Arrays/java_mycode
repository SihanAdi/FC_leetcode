class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int m = nums1.length;
        int n = nums2.length;
        int l = (m + n + 1) / 2;
        int r = (m + n + 2) / 2;
        return (find(nums1, nums2, 0, 0, l) + find(nums1, nums2, 0, 0, r)) / 2.0;
    }
    public double find(int[] nums1, int[] nums2, int i1, int i2, int k){
        if (i1 >= nums1.length){
            return nums2[i2 + k - 1];
        }
        if (i2 >= nums2.length){
            return nums1[i1 + k - 1];
        }
        if (k == 1){
            return Math.min(nums1[i1], nums2[i2]);
        }
        int mid1 = Integer.MAX_VALUE;
        int mid2 = Integer.MAX_VALUE;
        if (i1 + k / 2 - 1 < nums1.length){
            mid1 = nums1[i1 + k / 2 - 1];
        }
        if (i2 + k / 2 - 1 < nums2.length){
            mid2 = nums2[i2 + k / 2 - 1];
        }
        if (mid1 < mid2){
            return find(nums1, nums2, i1 + k / 2, i2, k - k / 2);
        }else{
            return find(nums1, nums2, i1, i2 + k / 2, k - k / 2);
        }
    }
}
